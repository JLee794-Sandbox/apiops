<policies>
	<inbound>
		
		<!-- Content Safety -->
		<set-variable name="SubscriptionKey" value="@(context.Request.Headers.GetValueOrDefault("api-key"))" />
		<send-request mode="new" response-variable-name="safetyResponse">
			<set-url>@("https://" + context.Request.Headers.GetValueOrDefault("Host") + "/contentsafety/text:analyze?api-version=2023-10-01")</set-url>
			<set-method>POST</set-method>
			<set-header name="Ocp-Apim-Subscription-Key" exists-action="override">
				<value>@(context.Variables.GetValueOrDefault<string>("SubscriptionKey"))</value>
			</set-header>
			<set-header name="Content-Type" exists-action="override">
				<value>application/json</value>
			</set-header>
			<set-body>@{
            	string[] categories = new string[] {"Hate","Sexual","SelfHarm","Violence"};
				JObject obj = new JObject();
				JProperty textProperty = new JProperty("text", string.Concat(context.Request.Body.As<JObject>(preserveContent: true)["messages"].Select(m => m.Value<string>("content")).ToArray()));
				JProperty categoriesProperty = new JProperty("categories", new JArray(categories));
				JProperty outputTypeProperty = new JProperty("outputType", "EightSeverityLevels");
				obj.Add(textProperty);
				obj.Add(categoriesProperty);
				obj.Add(outputTypeProperty);
				return obj.ToString();
			}</set-body>
		</send-request>
		<choose>
			<when condition="@(((IResponse)context.Variables["safetyResponse"]).StatusCode == 200)">
				<set-variable name="thresholdExceededCategory" value="@{
                    var thresholdExceededCategory = "";

                    // Define the allowed threshold for each category
                    Dictionary<string, int> categoryThresholds = new Dictionary<string, int>()
                    {
                        { "Hate", 0 },
                        { "Sexual", 0 },
                        { "SelfHarm", 0 },
                        { "Violence", 0 }
                    };

                    foreach (var category in categoryThresholds)
                    {
                        var categoryAnalysis = ((JArray)((IResponse)context.Variables["safetyResponse"]).Body.As<JObject>(preserveContent: true)["categoriesAnalysis"]).FirstOrDefault(c => (string)c["category"] == category.Key);

                        if (categoryAnalysis != null && (int)categoryAnalysis["severity"] > category.Value)
                        {
                            // Threshold exceeded for the category
                            thresholdExceededCategory = category.Key;
                            break;
                        }
                    }
                    return thresholdExceededCategory;
                }" />
				<choose>
					<when condition="@(context.Variables["thresholdExceededCategory"] != "")">
						<return-response>
							<set-status code="400" reason="Bad Request" />
							<set-body>@{
                                var errorResponse = new
                                {
                                    error = new
                                    {
                                        message = "The content was filtered by the Azure AI Content Safety service for the category: " + (string)context.Variables["thresholdExceededCategory"]
                                    }
                                };
                                return JsonConvert.SerializeObject(errorResponse);
                            }</set-body>
						</return-response>
					</when>
				</choose>
			</when>
			<otherwise>
				<return-response>
					<set-status code="500" reason="Internal Server Error" />
				</return-response>
			</otherwise>
		</choose>
		<!-- END Content Safety -->
		<!-- Token Metric Emitting Config -->
		<azure-openai-emit-token-metric namespace="openai">
			<dimension name="Subscription ID" value="@(context.Subscription.Id)" />
			<dimension name="Client IP" value="@(context.Request.IpAddress)" />
			<dimension name="API ID" value="@(context.Api.Id)" />
			<dimension name="User ID" value="@(context.Request.Headers.GetValueOrDefault("x-user-id", "N/A"))" />
		</azure-openai-emit-token-metric>
		<!-- Token Rate Limiting Config -->
		<!-- azure-openai-token-limit counter-key="@(context.Request.IpAddress)" tokens-per-minute="500" estimate-prompt-tokens="false" remaining-tokens-variable-name="remainingTokens" /-->
		<!-- Base Policy Wrapper -->
		<base />
		<!-- Managed Identity Auth to Backend Config -->
		<authentication-managed-identity resource="https://cognitiveservices.azure.com" output-token-variable-name="managed-id-access-token" ignore-error="false" />
		<set-header name="Authorization" exists-action="override">
			<value>@("Bearer " + (string)context.Variables["managed-id-access-token"])</value>
		</set-header>
		<!-- Lookup Embeddings in External (Azure Redis) Cache -->
		<azure-openai-semantic-cache-lookup score-threshold="0.8" embeddings-backend-id="embeddings-backend" embeddings-backend-auth="system-assigned" />
		<!-- Set Backend Service -->
		<set-backend-service backend-id="openai" />
	</inbound>
	<backend>
		<base />
	</backend>
	<outbound>
		<base />
		<!-- Content Safety Output -->
		<set-header name="debug-content-safety-output" exists-action="override">
			<value>@(((IResponse)context.Variables["safetyResponse"]).Body.As<string>(preserveContent: true))</value>
		</set-header>
	</outbound>
	<on-error>
		<base />
	</on-error>
</policies>